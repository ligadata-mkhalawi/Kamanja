
.. simp_scala_msg:

Write message definitions
=========================

Now itâ€™s time to write the metadata.
Begin with the various message definitions that are used.
The first message definition to be written
is the only message that is written to Kamanja.
Every other message is generated by the models.
To know more about messages, click on the messages section.
To know more about metadata in general, click on the metadata section.

Before moving on to the models, the naming convention is explained.
The first message, NumberMessage, is simply a message
with two numbers that serves as the entry point into the DAG.
The second message, AddedMessage,
contains the two numbers from the original NumberMessage,
as well as a third number that is the sum of the two other numbers
(Number1 + Number2 = Number3).

The third message, MultipledMessage, contains the three numbers
from AddedMessage as well as a fourth number
that is the product of the three other numbers
(Number1 * Number2 * Number3 = Number4).

The final message, DividedMessage (there is a pattern here),
which is the output message,
contains the dividend of the other four numbers
(Number1 / Number2 / Number3 / Number4 = Number5).

.. _numbermessage-scala:

NumberMessage.json
------------------

Here are the contents of NumberMessage.json:

::

    
    {
    "Message": {
        "NameSpace": "com.ligadata.test.dag",
        "Name": "NumberMessage",
        "Version": "00.01.00",
        "Description": "Message designed for testing DAG execution.",
        "Fixed": "true",
        "Persist": "false",
        "Fields": [{
            "Name": "Number1",
            "Type": "Int"
        }, {
            "Name": "Number2",
            "Type": "Int"
        }]
        }
    }

Copy the above block and place it in a file called NumberMessage.json
and place that file in the SimpleMathDAG folder created earlier.
The full name of the message is com.ligadata.test.dag.NumberMessage.
Its version is 00.01.00 and it contains two fields
that are integers named Number1 and Number2.

.. _addedmessage-scala:

AddedMessage.json
-----------------

Copy the following messages into a file and place them in the same directory as the first.

Here are the contents of AddedMessage.json:

::

    {
        "Message": {
        "NameSpace": "com.ligadata.test.dag",
        "Name": "AddedMessage",
        "Version": "00.01.00",
        "Description": "Message designed for testing DAG execution.",
        "Fixed": "true",
        "Perisist": "false",
        "Fields": [{
            "Name": "Number1",
            "Type": "Int"
        }, {
            "Name": "Number2",
            "Type": "Int"
        }, {
            "Name": "Number3",
            "Type": "Int"
        }]
        }
    }


.. _multipliedmessage-scala:

MultipliedMessage.json
----------------------

Here are the contents of MultipliedMessage.json:

::

    {
        "Message": {
        "NameSpace": "com.ligadata.test.dag",
        "Name": "MultipliedMessage",
        "Version": "00.01.00",
        "Description": "Message designed for testing DAG execution.",
        "Fixed": "true",
        "Perisist": "false",
        "Fields": [{
            "Name": "Number1",
            "Type": "Int"
        }, {
            "Name": "Number2",
            "Type": "Int"
        }, {
            "Name": "Number3",
            "Type": "Int"
        }, {
            "Name": "Number4",
            "Type": "Int"
        }]
        }
    }

.. _dividedmessage-scala:

DividedMessage.json
-------------------

Here are the contents of DividedMessage.json:

::

  {
        "Message": {
        "NameSpace": "com.ligadata.test.dag",
        "Name": "DividedMessage",
        "Version": "00.01.00",
        "Description": "Message designed for testing DAG execution.",
        "Fixed": "true",
        "Persist": "false",
        "Fields": [{
            "Name": "Number1",
            "Type": "Int"
        }, {
            "Name": "Number2",
            "Type": "Int"
        }, {
            "Name": "Number3",
            "Type": "Int"
        }, {
            "Name": "Number4",
            "Type": "Int"
        }, {
            "Name": "Double",
            "Type": "Double"
        }]
        }
    }


